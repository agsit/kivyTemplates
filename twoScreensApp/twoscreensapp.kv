#:kivy 1.10.0
#
# MIT License
# Copyright (c) 2017-2021 Avant Garde Scientific and Industries Technologies [AGSIT]
#
# Description:
#   This is the "main" layout the GUI window.
#
# create a new Kivy class "baseAppGUI" based on GridLayout, see Python class definition.
# Note: Kivy classes MUST start with a capital and for this "main" class the name must match
#       exactly with the Python class name used to define the GUI
<TwoScreensGui>:
  id: screenManager
  # transition: FadeTransition()
  scrOne: kvScrOne
  scrTwo: kvScrTwo
  ScrOne:
    id: kvScrOne
    name: 'ScreenOne'
    manager: screenManager
  ScrTwo:
    id: kvScrTwo
    name: 'ScreenTwo'
    manager: screenManager

<ScrOne>:
  # Define properties that can be accessed directly in python instead of using the Kivy "ids"
  # dictionary to access the various widgets properties. This adds a little bit of overhead
  # here since the Python properties have to be defined, but it also makes for slightly
  # cleaner coding on the Python side since the property "ids" does not have to be called all over
  # the place (this is not really beneficial if there is only a single Kivy panel in the App, but
  # it can be quite beneficial when there are multiple levels of sub-panels/classes)
  #
  # Define properties that can be accessed in Python using "self.root.<property name>"
  fileDiag: panFileDiag   # This links the Python property to the Kivy id
  statusBar: panStatusBar # This links the Python property to the Kivy id
  # Instantiate a custom Kivy class that is defined in the "filediag.kv" file sub-panel
  GridLayout:
    # In this case, the main window is separated in three rows using a GridLayout.  Each row uses
    # a custom Kivy class that is defined in separate *.kv files. The two mains motivations to 
    # define these classes in their own *.kv files are 1) re-usability or modularity and 2) keeping
    # the file size/length smaller. For example the "FileDiag.kv" and "StatusBar.kv" can easily be 
    # re-used in various applications 
    rows: 3
    cols: 1
    FileDiag:
      id: panFileDiag
    # Instantiate a Kivy BoxLayout class
    BoxLayout:
      size_hint_y: 1
    # Instantiate a custom Kivy class that is defined in the "status.kv" file sub-panel
    StatusBar:
      id: panStatusBar


<ScrTwo>:
  # Define properties that can be accessed in Python using "self.root.<property name>"
  # NOTE: Duplicate the same status bar in this screen because the content should be same in ALL
  #       screens.
  statusBar: panStatusBar # This links the Python property to the Kivy id
  GridLayout:
    # Define the base grid.
    rows: 2
    cols: 1
    # Instantiate a Kivy BoxLayout class
    BoxLayout:
      size_hint_y: 1
    # Instantiate a custom Kivy class that is defined in the "status.kv" file sub-panel
    StatusBar:
      id: panStatusBar
